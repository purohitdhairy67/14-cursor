export default "#define GLSLIFY 1\nconst float PI = 3.1415926535897932384626433832795;\nconst float PI_2 = 1.57079632679489661923;\nconst float PI_4 = 0.785398163397448309616;\n\n// Linear map of input values to output values\n// For instance: [0., 0.5, 1.] -> [10., 100., 10.]\nfloat mix3 (vec3 inputRange, vec3 outputRange, float val) {\n  float value = mix(outputRange.x, outputRange.y, smoothstep(inputRange.x, inputRange.y, val));\n  value = mix(value, outputRange.z, smoothstep(inputRange.y, inputRange.z, val));\n  return value;\n}\n\n// Linear map of input values to output values\n// For instance: [0., 0.5, 0.9, 1.] -> [10., 100., 100., 10.]\nfloat mix4 (vec4 inputRange, vec4 outputRange, float val) {\n  float value = mix(outputRange.x, outputRange.y, smoothstep(inputRange.x, inputRange.y, val));\n  value = mix(value, outputRange.z, smoothstep(inputRange.y, inputRange.z, val));\n  value = mix(value, outputRange.w, smoothstep(inputRange.z, inputRange.w, val));\n  return value;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nuniform vec3 u_coverColor;\nuniform vec3 u_waveColor;\nuniform float u_time;\nuniform vec2 u_res;\nuniform vec2 u_startPosition;\nuniform float u_coverProgress;\nuniform float u_waveProgress;\nuniform float u_waveRest;\n\nvarying vec2 v_uv;\nvarying float v_n;\nvarying float v_waveNoise;\n\n//---------------------------------------------------------\n// draw rounded rectangle http://glslsandbox.com/e#43292.1\n//---------------------------------------------------------\nfloat roundedRectangle (vec2 uv, vec2 pos, vec2 size, float radius, float thickness)\n{\n  float d = length(max(abs(uv - pos), size) - size) - radius;\n  return smoothstep(.8, 0.2, d / thickness * 5.0);\n\n}\n\nvoid main() {\n    float aspect = u_res.x / u_res.y;\n\n    float progress = u_coverProgress;\n\n    // Position\n    vec2 startPos = u_startPosition;\n    startPos.x *= aspect;\n    vec2 endPos = vec2(0, 0.);\n    vec2 pos = mix(startPos, endPos, smoothstep(0.65, 0.9, progress));\n\n    // Size\n    vec2 size = mix(vec2(.0), vec2(1.0 * aspect, 1.0), smoothstep(0.8, .99, progress));\n\n    // Blur\n    float startBlur = 15.0;\n    float endBlur = .000001;\n    float blur = mix(.000001, startBlur, smoothstep(0., 0.9, progress));\n    blur = mix(blur, endBlur, smoothstep(0.99, 1.0, progress));\n\n    // rounded mask\n    vec2 uv = (2.0 * v_uv - 1.0); // -1.0 .. 1.0\n    uv.x *= aspect;\n    float c = roundedRectangle(uv, pos, size, .0, blur) * 2.6;\n\n    // NOISE from vertex shader\n    float n = v_n - 1.0;\n\n    // fast antialiasing\n    float finalMask = smoothstep(0.47, 0.5, n + c);\n\n    float waveProgress = 1.0 - u_waveProgress;\n    float maxHeight = 0.25;\n    float restHeight = 0.1;\n    float waveHeight = 0.0;\n          waveHeight = mix(waveHeight, maxHeight, smoothstep(0.0, 0.3, u_waveProgress));\n          waveHeight = mix(waveHeight, restHeight, smoothstep(0.3, u_waveRest, u_waveProgress));\n          waveHeight = mix(waveHeight, maxHeight, smoothstep(u_waveRest, 0.7, u_waveProgress));\n          waveHeight = mix(waveHeight, 0.0, smoothstep(0.7, 1.0, u_waveProgress));\n\n    float waveAA = 0.001;\n    float threshold = v_uv.y - v_waveNoise * waveHeight;\n    #if __VERSION__ == 300\n      waveAA = fwidth(threshold) * 1.14;\n    #endif\n\n    float waveMask = smoothstep(waveProgress, waveProgress + waveAA, threshold);\n    vec3 color = mix(u_coverColor, u_waveColor, waveMask);\n    gl_FragColor = vec4(color, finalMask);\n}\n";