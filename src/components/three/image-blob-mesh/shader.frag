export default "#define GLSLIFY 1\nfloat exponentialInOut(float t) {\n  return t == 0.0 || t == 1.0\n    ? t\n    : t < 0.5\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n// Manual antialias of the Plane geometry.... *sigh*\n\n// Must be a more smart way :)\nfloat antialiasPlane(vec2 uv) {\n\n  uv = (2.0 * uv - 1.0); // -1.0 .. 1.0\n\n  // mask each side\n  float topMask = 1.0 - uv.y;\n  float bottomMask = uv.y + 1.0;\n  float leftMask = uv.x + 1.0;\n  float rightMask = 1.0 - uv.x;\n\n  // combine masks\n  float squareMask = topMask * bottomMask * leftMask * rightMask;\n\n  // calc antialias\n  #if __VERSION__ == 300\n    float delta = fwidth(squareMask) * 1.14;\n    return smoothstep(0.0, 0. + delta, squareMask);\n  #else\n    return 1.0;\n  #endif\n}\n\n// uniform float u_time;\nuniform float u_transitionTime;\nuniform float u_imgOpacity;\nuniform float u_pixelRatio;\nuniform float u_imgZoom;\nuniform vec3 u_color;\nuniform vec2 u_res;\nuniform vec2 u_mouse;\nuniform float u_blobEffect;\nuniform vec2 u_planeSize;\nuniform sampler2D u_texture;\nuniform float u_hasTexture;\nuniform float u_inViewport;\n\nvarying vec2 v_uv;\nvarying float v_bn;\nvarying float v_tn;\n\nfloat circle(in vec2 _st, in float _radius, in float blurriness){\n  vec2 dist = _st;\n  return 1.-smoothstep(_radius-(_radius*blurriness), _radius+(_radius*blurriness), dot(dist,dist)*4.0);\n}\n\n//---------------------------------------------------------\n// draw rounded rectangle http://glslsandbox.com/e#43292.1\n//---------------------------------------------------------\nfloat roundedRectangle (vec2 uv, vec2 pos, vec2 size, float radius, float thickness)\n{\n  float d = length(max(abs(uv - pos), size) - size) - radius;\n  return smoothstep(0.8, 0.2, d / thickness * 5.0);\n\n}\n\nvoid main() {\n\n  float delay = 0.0;\n  float progress = exponentialInOut(min(1.0, max(0.0, (u_transitionTime - delay) * 0.85)));\n\n  // Zoom image by modifying original UV\n  float parallaxSize = 0.1;\n  vec2 parallaxZoom = v_uv * (1.0 - parallaxSize) + 0.5 * parallaxSize;\n  vec2 uvZoom = mix(parallaxZoom, v_uv * .85 + 0.5 * 0.15, max(1. -progress, u_imgZoom));\n\n  vec2 uv = uvZoom;\n\n  // Parallax image in Y-axis on scroll\n  uv.y += parallaxSize * 0.5 + u_inViewport * -parallaxSize;\n\n  // sample image color\n  vec4 image = texture2D(u_texture, uv, -1.0);\n\n  // Get pixel coordinate\n  vec2 res = u_res * u_pixelRatio;\n  float ratio = u_res.y / u_res.x;\n\n  vec2 pos = gl_FragCoord.xy / res.xy - vec2(0.5);\n  vec2 st = vec2(pos.xy);\n  st.y *= ratio; // adjust to screen aspect ratio\n\n  ////////////////////////////////\n  // BLOB\n  ////////////////////////////////\n\n  // We readjust the mouse coordinates\n  vec2 mouse = u_mouse * -.5;\n  mouse.y *= ratio; // adjust to screen aspect ratio\n  vec2 mousePos = st + mouse;\n\n  // u_blobEffect is 0.3 at center 1.0 at edge\n  float effect = clamp(u_blobEffect, 0.0, 1.0);\n  float size = mix(0.0, .1, smoothstep(0.0, 1.0, u_blobEffect));\n  float blur = mix(0.6, 0.6, smoothstep(0.3, 1.0, u_blobEffect));\n\n  // create circular mask\n  float c = circle(mousePos, size, blur) * 2.6;\n\n  // Noise mask\n  float blobNoise = v_bn - 1.0; // MUCH FASTER to do noise in vertex shader instead\n\n  // ANTIALIAS BLOB\n  float finalMask = 0.;\n  #if __VERSION__ == 300\n    float mask = blobNoise + c;\n    float delta = fwidth(mask) * 1.5;\n    finalMask = smoothstep(.5 - delta, 0.5, mask);\n  #else\n    finalMask = smoothstep(0.45, 0.5, blobNoise + c);\n  #endif\n\n  ////////////////////////////////\n\n  // Show loading color or image\n  vec3 loadingColor = vec3(0.9, .9, .9);\n  vec3 finalColor = loadingColor;\n  if (u_hasTexture == 1.0) {\n    finalColor = mix(loadingColor, image.rgb, u_imgOpacity);\n  }\n  finalColor = mix(finalColor, u_color, finalMask);\n\n  // ANTIALIAS plane geometry\n  float squareMask = antialiasPlane(v_uv);\n\n  // blob grow transition mask\n  float transitionNoise = v_tn - 1.0; // MUCH FASTER to do noise in vertex shader instead\n  vec2 uvMask = (2.0 * v_uv - 1.0); // -1.0 .. 1.0\n  float planeRatio = u_planeSize.y / u_planeSize.x;\n\n  float growSize = mix(0.66, 1.0, progress);\n  float growBlur = mix(2., .00001, progress);\n  float transitionMask = roundedRectangle(uvMask, vec2(0., 0.), vec2(growSize), 0., growBlur) * 2.6;\n  squareMask *= smoothstep(0.45, 0.5, transitionMask + transitionNoise);\n\n  vec4 finalImage = vec4(finalColor, squareMask);\n  gl_FragColor = finalImage;\n}\n";